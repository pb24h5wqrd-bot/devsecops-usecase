name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-scan-sign-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # For GHCR push
      security-events: write  # For SARIF upload to Code Scanning

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      id: build-push  # ID for digest
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ghcr.io/${{ github.repository }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Install Trivy manually
      run: |
        wget https://github.com/aquasecurity/trivy/releases/download/v0.67.0/trivy_0.67.0_Linux-64bit.tar.gz
        tar -xzf trivy_0.67.0_Linux-64bit.tar.gz
        sudo mv trivy /usr/local/bin/
        trivy --version  # Verify install (should show 0.67.0, no warnings)

    - name: Scan image with Trivy
      id: trivy
      run: trivy image --exit-code 0 --no-progress --severity CRITICAL,HIGH --format sarif --output trivy-results.sarif --skip-version-check ghcr.io/${{ github.repository }}:latest  # Set to --exit-code 1 for prod gating on vulns (bonus)
      continue-on-error: true  # Allow POC to continue even with errors/vulns

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()  # Upload SARIF even if scan fails
      with:
        sarif_file: trivy-results.sarif

    - name: Install Syft manually
      run: |
        wget https://github.com/anchore/syft/releases/download/v1.33.0/syft_1.33.0_linux_amd64.tar.gz
        tar -xzf syft_1.33.0_linux_amd64.tar.gz
        sudo mv syft /usr/local/bin/
        syft version  # Verify install

    - name: Generate SBOM with Syft
      run: syft scan --quiet -o spdx-json=sbom.json registry:ghcr.io/${{ github.repository }}:latest  # Pulls from registry (logged in)

    - name: Install Cosign
      uses: sigstore/cosign-installer@main

    - name: Generate Cosign keypair (demo only, non-interactive empty passphrase)
      env:
        COSIGN_PASSWORD: ""  # Empty for unencrypted key
      run: cosign generate-key-pair

    - name: Sign the container image with Cosign
      env:
        COSIGN_PASSWORD: ""  # Matches empty passphrase
      run: cosign sign --key cosign.key --yes ghcr.io/${{ github.repository }}@${{ steps.build-push.outputs.digest }}  # Skip prompt

    - name: Pull image for Kind (ensure local availability)
      run: docker pull ghcr.io/${{ github.repository }}@${{ steps.build-push.outputs.digest }}

    - name: Install Kind
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/

    - name: Create Kind cluster and wait for readiness
      run: |
        kind create cluster --name kind
        kubectl wait --for=condition=Ready nodes --all --timeout=300s

    - name: Load image into Kind (for local cluster pull)
      run: kind load docker-image ghcr.io/${{ github.repository }}@${{ steps.build-push.outputs.digest }} --name kind

    - name: Deploy to Kubernetes (Kind)
      run: |
        kubectl apply -f k8s/
        kubectl rollout status deployment/app --timeout=300s
      if: success()  # Only if all prior steps passed
