name: Secure CI/CD

permissions:
  contents: read
  id-token: write
  
on:
  push:
    branches: [ main ]

jobs:
  build-scan-sign-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE: ghcr.io/${{ github.repository }}/secure-app:${{ github.run_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fix npm vulnerabilities
        run: |
          cd app
          npm install
          npm audit fix --force

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build --no-cache -t $IMAGE .
     
      - name: Debug installed cross-spawn version
        run: docker run --rm $IMAGE sh -c "npm ls cross-spawn"

      - name: Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE }}
          format: table
          exit-code: '0'
          severity: HIGH,CRITICAL
          dir: /app/node_modules
        env:
          TRIVY_CACHE_DIR: /tmp/trivy-cache

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft $IMAGE -o json > sbom.json

      - name: Install latest Cosign
        run: |
          COSIGN_VERSION=$(curl -s https://api.github.com/repos/sigstore/cosign/releases/latest | grep tag_name | cut -d '"' -f 4)
          echo "Installing Cosign version $COSIGN_VERSION"
          curl -Lo cosign https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64
          chmod +x cosign
          sudo mv cosign /usr/local/bin/cosign
          
      - name: Sign image with Cosign
        env:
          COSIGN_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        run: |
          echo "$COSIGN_KEY" > cosign.key
          cosign sign --key cosign.key $IMAGE

      - name: Push image to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push $IMAGE

      - name: Deploy to Kubernetes (simulate)
        if: success()
        run: |
          echo "kubectl apply -f k8s/deployment.yaml"
          echo "kubectl apply -f k8s/service.yaml"
          echo "Deployment simulated (no cluster required)"
